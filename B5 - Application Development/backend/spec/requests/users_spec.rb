require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
      { first_name: "Jean-Jean", last_name: "La fouriere", email: "jean.four@email.com", password: "123456",
admin: false }
    }

  let(:valid_attributes_admin) {
      { first_name: "Jean-Jean", last_name: "La fouriere", email: "jean.four@email.com", password: "123456",
admin: true }
    }

  let(:invalid_attributes) {
      { first_name: "Jean-Jean", last_name: "La fouriere", email: "jean.four", password: "1", admin: true }
    }

  let(:valid_refresh_token_body) {
    { name: "google", refresh_token: "flkhjglfda", redirect_uti: "http://localhost:8081" }
  }

  let(:valid_google_token_body) {
    { refresh_token: "flkhjglfda", redirect_uti: "http://localhost:8081" }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    before { sign_in(create(:user_admin)) }

    it "renders a successful response" do
      User.create! valid_attributes
      get users_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    before { sign_in(create(:user_admin)) }

    it "renders a successful response" do
      user = User.create! valid_attributes
      get user_url(user), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new User" do
        expect {
          post users_url,
               params: { user: valid_attributes }, headers: valid_headers, as: :json
        }.to change(User, :count).by(1)
      end

      it "renders a JSON response with the new user" do
        post users_url,
             params: { user: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new User" do
        expect {
          post users_url,
               params: { user: invalid_attributes }, as: :json
        }.to change(User, :count).by(0)
      end

      it "renders a JSON response with errors for the new user" do
        post users_url,
             params: { user: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "GET /current_user" do
    context "User connected" do
      let(:user) { create(:user) }
      before { sign_in(user) }

      it "render a JSON response with the current_user" do
        get current_user_url, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "User not connected" do
      it "render a JSON response with errors" do
        get current_user_url, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "GET /reset_token" do
    context "User connected" do
      let(:user) { create(:user) }
      before { sign_in(user) }

      it "render a JSON response with the current_user" do
        get users_reset_token_url, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "User not connected" do
      it "render a JSON response with errors" do
        get users_reset_token_url, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "GET /refresh_token" do
    context "User connected" do
      let(:user) { create(:user) }
      before { sign_in(user) }

      context "invalid code" do
        it "render a JSON response with the current_user" do
          get users_refresh_token_url, params: { refresh_token: valid_refresh_token_body }, headers: valid_headers,
              as: :json
          expect(response).to have_http_status(:unauthorized)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end
    end

    context "User not connected" do
      it "render a JSON response with errors" do
        get users_refresh_token_url, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "GET /google_sign_in" do
    context "User connected" do
      let(:user) { create(:user) }
      before { sign_in(user) }

      context "invalid code" do
        it "render a JSON response with the current_user" do
          get users_google_sign_in_url, params: { user: valid_google_token_body }, headers: valid_headers,
              as: :json
          expect(response).to have_http_status(:unauthorized)
          expect(response.content_type).to match(a_string_including("application/json"))
        end
      end
    end

    context "User not connected" do
      it "render a JSON response with errors" do
        get users_google_sign_in_url, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unauthorized)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
